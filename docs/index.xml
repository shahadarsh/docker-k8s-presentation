<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction to Kubernetes</title>
    <link>https://shahadarsh.github.io/docker-k8s-presentation/</link>
    <description>Recent content on Introduction to Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Dec 2018 17:00:31 -0500</lastBuildDate>
    
	<atom:link href="https://shahadarsh.github.io/docker-k8s-presentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Beginning</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/history/history/</link>
      <pubDate>Sun, 09 Dec 2018 17:20:59 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/history/history/</guid>
      <description>In the beginning </description>
    </item>
    
    <item>
      <title>Hypervisor</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/history/hyper/</link>
      <pubDate>Sun, 09 Dec 2018 17:20:59 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/history/hyper/</guid>
      <description>The Hypervisor </description>
    </item>
    
    <item>
      <title>Containers</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/history/containers/</link>
      <pubDate>Sun, 09 Dec 2018 17:20:59 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/history/containers/</guid>
      <description>Containers </description>
    </item>
    
    <item>
      <title>Layers</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/history/layers/</link>
      <pubDate>Sun, 09 Dec 2018 17:20:59 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/history/layers/</guid>
      <description>Container Layers </description>
    </item>
    
    <item>
      <title>Graduated Projects</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/community/projects_grad/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:43 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/community/projects_grad/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Incubating Projects</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/community/projects_inc/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:43 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/community/projects_inc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Involvement</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/community/involvement/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:43 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/community/involvement/</guid>
      <description>  Sigs https://github.com/kubernetes/community/blob/master/sig-list.md
  Stackoverflow https://stackoverflow.com/questions/tagged/kubernetes
  Slack
 k8 http://slack.k8s.io/ CNCF https://slack.cncf.io/    </description>
    </item>
    
    <item>
      <title>Container to Container</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/container-to-container/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/container-to-container/</guid>
      <description>Credit: https://sookocheff.com/post/kubernetes/understanding-kubernetes-networking-model/#kubernetes-networking-model</description>
    </item>
    
    <item>
      <title>Master</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/arch/master/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/arch/master/</guid>
      <description>  API data store: Etcd (Cluster State)
  Controller Managers :
 Node Controller Deployment Controller ReplicaSet Controller Replication Controller Endpoints Controller Service Account &amp;amp; Token Controller    Scheduler: Bind pod to Node
  </description>
    </item>
    
    <item>
      <title>Node</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/arch/node/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/arch/node/</guid>
      <description> Kubelet:   cAdvisor (metrics, logs&amp;hellip;)  Container Runtime:   docker containerd  Pod:   Container (one or more)  Kube-proxy:   Used to reach services and allow communication between Nodes.   </description>
    </item>
    
    <item>
      <title>Pod to Pod (Same Node)</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/pod-to-pod-same-node/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/pod-to-pod-same-node/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Data Flow</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/arch/data/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/arch/data/</guid>
      <description>Data Flow   CNI: Network Plugin in Kubelet that allows to talk to networking to get IPs for Pods and Services.
  gRPC: API to communicate API Server to ETCD, Controller Manager and Scheduler
  Kubelet - all K8s nodes have a kubelet that ensures that any pod assigned to it are running and configured in the desired state.
  CRI(Container Runtime Interface) gRPC API compiled in kubelet which allows to kubelet to talk to container runtimes by using gRPC API.</description>
    </item>
    
    <item>
      <title>Pod to Pod (Different Nodes)</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/pod-to-pod-diff-nodes/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/pod-to-pod-diff-nodes/</guid>
      <description>AWS&#39;s implementation of CNI plugin: https://github.com/aws/amazon-vpc-cni-k8s
 </description>
    </item>
    
    <item>
      <title>High Availability Cluster</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/arch/ha-stacked-etcd/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/arch/ha-stacked-etcd/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Pod to Service</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/pod-to-service/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/pod-to-service/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>High Availability Cluster</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/arch/ha-external-etcd/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/arch/ha-external-etcd/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Kubernetes DNS</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/dns/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/dns/</guid>
      <description>Kubernetes DNS Kubernetes DNS schedules a DNS Pod and Service on the cluster, and configures the kubelets to tell individual containers to use the DNS Service’s IP to resolve DNS names.
Check Services exercise for example</description>
    </item>
    
    <item>
      <title>Internet to Service (Egress)</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/internet-to-service-egress/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/internet-to-service-egress/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Load Balancer</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/ingress/ingress-lb/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/ingress/ingress-lb/</guid>
      <description>Load Balancer (Layer 4 Ingress)  </description>
    </item>
    
    <item>
      <title>Ingress Controller</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/ingress/ingress-layer-7/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/ingress/ingress-layer-7/</guid>
      <description>Ingress Controller (Layer 7 Ingress)  </description>
    </item>
    
    <item>
      <title>Data Flow</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/cni/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/networking/cni/</guid>
      <description>Data Flow   CNI: Network Plugin in Kubelet that allows to talk to networking to get IPs for Pods and Services.
  gRPC: API to communicate API Server to ETCD, Controller Manager and Scheduler
  Kubelet - all K8s nodes have a kubelet that ensures that any pod assigned to it are running and configured in the desired state.
  CRI(Container Runtime Interface) gRPC API compiled in kubelet which allows to kubelet to talk to container runtimes by using gRPC API.</description>
    </item>
    
    <item>
      <title>Amazon EKS</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/running/eks/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:54 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/running/eks/</guid>
      <description>Amazon Elastic Kubernetes Service </description>
    </item>
    
    <item>
      <title>Docker Network options</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/network/dockernetop/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:25 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/network/dockernetop/</guid>
      <description>Docker Networking options    Flag value Description     -p 8080:80 Map TCP port 80 in the container to port 8080 on the Docker host.   -p 192.168.1.100:8080:80 Map TCP port 80 in the container to port 8080 on the Docker host for connections to host IP 192.168.1.100.   -p 8080:80/udp Map UDP port 80 in the container to port 8080 on the Docker host.</description>
    </item>
    
    <item>
      <title>Docker0 </title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/network/docker0/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:25 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/network/docker0/</guid>
      <description>Container Networking  When Docker starts, it creates a virtual interface called docker0 on the host machine docker0 is assigned a random IP address and subnet from the private range defined by RFC 1918 It passes or switches packets between two connected devices just like a physical bridge or switch  Host to container Container to container   Each new container gets one interface that is automatically attached to the docker0 bridge  </description>
    </item>
    
    <item>
      <title>Docker0 Diagram</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/network/docker0-dig/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:25 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/network/docker0-dig/</guid>
      <description>Container Networking </description>
    </item>
    
    <item>
      <title>Layers</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/storage/layers/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:32 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/storage/layers/</guid>
      <description>Layers </description>
    </item>
    
    <item>
      <title>Volumes</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/storage/volumes/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:32 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/storage/volumes/</guid>
      <description>Volumes </description>
    </item>
    
    <item>
      <title>Storage</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/storage/benefits/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:32 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/storage/benefits/</guid>
      <description>Benefits of Volumes  De-couple the data that is stored, from the container which created the data Good for sharing data between containers Can setup a data containers which has a volume you mount in other containers Share directories between multiple containers Bypassing the copy on write system to achieve native disk I/O performance Share a host directory with a container Share a single file between the host and container  </description>
    </item>
    
    <item>
      <title>Volume CLI</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/storage/commands/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:32 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/storage/commands/</guid>
      <description>Docker Volume command The docker volume command contains a number of sub commands used to create and manage volumes Commands are
 docker volume create docker volume ls docker volume inspect docker volume rm  </description>
    </item>
    
    <item>
      <title>Pod Exercises</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/pods/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/pods/exercises/</guid>
      <description>Github repo: https://github.com/shahadarsh/docker-k8s-workshop/
Go to: exercises/kubernetes/01-pods</description>
    </item>
    
    <item>
      <title>Resource Quotas</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/resourcequotas/resources/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/resourcequotas/resources/</guid>
      <description>Compute Resources   CPU
  Memory
  Storage
 requests.storage persistentvolumeclaims storage-class-name.storageclass.storage.k8s.io/requests.storage storage-class-name.storageclass.storage.k8s.io/persistentvolumeclaims    Object Count
 configmaps persistentvolumeclaims pods replicationcontrollers resourcequotas services services.loadbalancers services.nodeports secrets    Priority - low, medium, high
  More info</description>
    </item>
    
    <item>
      <title>Labels and Selectors</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/pods/labels_selectors/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/pods/labels_selectors/</guid>
      <description>Labels Labels are key/value pairs that are attached to objects, such as pods that help to identify that object.
Selectors Label Selectors help client/user identify a set of objects.
spec: selector: matchLabels: app: mysql strategy: type: Recreate template: metadata: labels: app: mysql Demo Create labels &amp;amp; use selector to identify set of objects</description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/namespaces/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/namespaces/exercises/</guid>
      <description>Github repo: https://github.com/shahadarsh/docker-k8s-workshop/
Go to: exercises/kubernetes/02-namespaces</description>
    </item>
    
    <item>
      <title>Controllers Updates</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/controllers/updates/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/controllers/updates/</guid>
      <description>Deployments  Scaling Rolling  ReplicaSet  Desired state  Strategies:  Recreate RollingUpdate (default) Blue/Green Canary A/B Testing  </description>
    </item>
    
    <item>
      <title>Controllers Exercises</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/controllers/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/controllers/exercises/</guid>
      <description>Go to: exercises/kubernetes/03-controllers</description>
    </item>
    
    <item>
      <title>Volumes</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/storage/volumes/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/storage/volumes/</guid>
      <description>Several volume types are supported
 awsElasticBlockStore azureDisk gcePersistentDisk hostPath secret configmaps  awsElasticBlockStore example yaml:
apiVersion: v1 kind: Pod metadata: name: test-ebs spec: containers: - image: k8s.gcr.io/test-webserver name: test-container volumeMounts: - mountPath: /test-ebs name: test-volume volumes: - name: test-volume # This AWS EBS volume must already exist. awsElasticBlockStore: volumeID: &amp;lt;volume-id&amp;gt; fsType: ext4 </description>
    </item>
    
    <item>
      <title>Persistent Volume</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/storage/pv/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/storage/pv/</guid>
      <description>Persistent Volumes (PV&#39;s) are a piece of storage provisioned in a cluster and can be used/reference in the cluster like another other resource.
Provisioning - Static or Dynamic
Types of PV&#39;s
 GCEPersistentDisk AWSElasticBlockStore AzureFile CephFS  kind: PersistentVolume apiVersion: v1 metadata: name: task-pv-volume labels: type: local spec: storageClassName: manual capacity: storage: 10Gi accessModes: - ReadWriteOnce hostPath: path: &amp;#34;/mnt/data&amp;#34; </description>
    </item>
    
    <item>
      <title>Persistent Volume Claims</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/storage/pvc/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/storage/pvc/</guid>
      <description>Persistent Volume Claims (PVC&#39;s) - Allow pods to requests and attache Persistent Volumes available in the cluster.
When used in with Dynamic provision and Storage Classes, PVC&#39;s can automatically make storage available on demand.
Types of PVC&#39;s
 GCEPersistentDisk AWSElasticBlockStore AzureFile CephFS  kind: Pod apiVersion: v1 metadata: name: mypod spec: containers: - name: myfrontend image: nginx volumeMounts: - mountPath: &amp;#34;/var/www/html&amp;#34; name: mypd volumes: - name: mypd persistentVolumeClaim: claimName: myclaim </description>
    </item>
    
    <item>
      <title>Storage Classes</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/storage/classes/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/storage/classes/</guid>
      <description>Storage classes allow cluster administrators to provide varing levels of support and types of storage to applications in a cluster
Example: Storage class that will provision an AWS EBS Volumes when referenced a PVC
kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: standard provisioner: kubernetes.io/aws-ebs parameters: type: gp2 reclaimPolicy: Retain mountOptions: - debug volumeBindingMode: Immediate </description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/storage/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/storage/exercises/</guid>
      <description>Github repo: https://github.com/shahadarsh/docker-k8s-workshop/
Go to: exercises/kubernetes/04-storage</description>
    </item>
    
    <item>
      <title>Secrets Uses - Secret</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/secrets/secret/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:14 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/secrets/secret/</guid>
      <description>echo -n &amp;#39;admin&amp;#39; | base64 YWRtaW4= echo -n &amp;#39;1f2d1e2e67df&amp;#39; | base64 MWYyZDFlMmU2N2Rm Write a Secret that looks like this:
apiVersion: v1 kind: Secret metadata: name: mysecret type: Opaque data: username: YWRtaW4= password: MWYyZDFlMmU2N2Rm </description>
    </item>
    
    <item>
      <title>Secrets Uses - File</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/secrets/file/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:14 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/secrets/file/</guid>
      <description>apiVersion: v1 kind: Pod metadata: name: mypod spec: containers: - name: mypod image: redis volumeMounts: - name: foo mountPath: &amp;#34;/etc/foo&amp;#34; readOnly: true volumes: - name: foo secret: secretName: mysecret </description>
    </item>
    
    <item>
      <title>Secrets Uses - Env Var</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/secrets/env/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:14 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/secrets/env/</guid>
      <description>apiVersion: v1 kind: Pod metadata: name: secret-env-pod spec: containers: - name: mycontainer image: redis env: - name: SECRET_USERNAME valueFrom: secretKeyRef: name: mysecret key: username - name: SECRET_PASSWORD valueFrom: secretKeyRef: name: mysecret key: password restartPolicy: Never </description>
    </item>
    
    <item>
      <title>Configmaps</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/configmaps/configmap/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:14 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/configmaps/configmap/</guid>
      <description>1apiVersion: v1 2data: 3 game.properties: | 4enemies=aliens 5 lives=3 6 enemies.cheat=true 7 enemies.cheat.level=noGoodRotten 8 secret.code.passphrase=UUDDLRLRBABAS 9 secret.code.allowed=true 10 secret.code.lives=30 11 ui.properties: | 12color.good=purple 13 color.bad=yellow 14 allow.textmode=true 15 how.nice.to.look=fairlyNice 16kind: ConfigMap 17metadata: 18 name: game-config 19 namespace: default 20  </description>
    </item>
    
    <item>
      <title>Configmaps - Volume</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/configmaps/volumes/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:14 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/configmaps/volumes/</guid>
      <description>1apiVersion: v1 2kind: Pod 3metadata: 4 name: dapi-test-pod 5spec: 6 containers: 7 - name: test-container 8 image: k8s.gcr.io/busybox 9 command: [ &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;ls /etc/config/&amp;#34; ] 10 volumeMounts: 11 - name: config-volume 12 mountPath: /etc/config 13 volumes: 14 - name: config-volume 15 configMap: 16 name: special-config 17 restartPolicy: Never </description>
    </item>
    
    <item>
      <title>Configmaps - Env Var</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/configmaps/envvar/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:14 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/configmaps/envvar/</guid>
      <description>1apiVersion: v1 2kind: Pod 3metadata: 4 name: dapi-test-pod 5spec: 6 containers: 7 - name: test-container 8 image: k8s.gcr.io/busybox 9 command: [ &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)&amp;#34; ] 10 env: 11 - name: SPECIAL_LEVEL_KEY 12 valueFrom: 13 configMapKeyRef: 14 name: special-config 15 key: SPECIAL_LEVEL 16 - name: SPECIAL_TYPE_KEY 17 valueFrom: 18 configMapKeyRef: 19 name: special-config 20 key: SPECIAL_TYPE 21 restartPolicy: Never </description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/configmaps/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/configmaps/exercises/</guid>
      <description>Go to dir: 06-config-maps-and-secrets</description>
    </item>
    
    <item>
      <title>Service Diagram</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/services/diag/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/services/diag/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/services/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/services/exercises/</guid>
      <description>Go to dir: 05-services</description>
    </item>
    
    <item>
      <title>Liveliness</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/healthchecks/liveliness/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/healthchecks/liveliness/</guid>
      <description>Readiness and Liveliness Liveliness Liveliness checks inform the kubelet that the pod is running. If this check fails the kubelet will attempt to restart the pod.
apiVersion: v1 kind: Pod metadata: labels: test: liveness name: liveness-exec spec: containers: - name: liveness image: k8s.gcr.io/busybox args: - /bin/sh - -c - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600 livenessProbe: exec: command: - cat - /tmp/healthy initialDelaySeconds: 5 periodSeconds: 5 </description>
    </item>
    
    <item>
      <title>Readiness</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/healthchecks/readiness/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/healthchecks/readiness/</guid>
      <description>Readiness and Liveliness Readiness Readiness checks let the kubelet know that the pod is ready to receive traffic. For example if this check fails the Service or Load balancer does not send traffic to that pod.
readinessProbe: exec: command: - cat - /tmp/healthy initialDelaySeconds: 5 periodSeconds: 5 </description>
    </item>
    
    <item>
      <title>Exercises</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/healthchecks/exercises/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:31 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/objects/healthchecks/exercises/</guid>
      <description>Go to dir: 07-healthchecks</description>
    </item>
    
    <item>
      <title>Benefits of Docker</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/docker/benefits/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:05 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/docker/benefits/</guid>
      <description>Docker Benefits  Separation of concerns Developers focus on building their apps System admins focus on deployment Fast development cycle Application portability Build in one environment, ship to another Scalability Easily spin up new containers if needed Run more apps on one host machine  </description>
    </item>
    
    <item>
      <title>Docker Platform</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/docker/platform/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:05 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/docker/platform/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/docker/dockerfile/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:05 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/docker/dockerfile/</guid>
      <description>Dockerfile  Instructions specify what to do when building the image FROM instruction specifies what the base image should be RUN instruction specifies a command to execute Comments start with “#” Remember, each line in a Dockerfile creates a new layer if it changes the state of the image You need to find the right balance between having lots of layers created for the image and readability of the Dockerfile Don’t install unnecessary packages One ENTRYPOINT per Dockerfile Combine similar commands into one by using “&amp;amp;&amp;amp;” and “\” Use the caching system to your advantage The order of statements is important Add files that are least likely to change first and the ones most likely to change last  </description>
    </item>
    
    <item>
      <title>CLI</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/docker/cli/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:05 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/docker/cli/</guid>
      <description>Docker Docker cli  docker ps docker images docker logs docker exec  Official Documentation</description>
    </item>
    
    <item>
      <title>Docker Exercise</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/containers/docker/exercise/</link>
      <pubDate>Sun, 09 Dec 2018 17:21:05 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/containers/docker/exercise/</guid>
      <description>Docker Exercise Git clone Microservices Exercises</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/monitoring/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:55 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/monitoring/</guid>
      <description>  cAdvisor
  Prometheus
  Datadog
  </description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:55 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging/</guid>
      <description> kubectl logs Node level Cluster Level Side Car  </description>
    </item>
    
    <item>
      <title>Logging - Pod</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging-kc/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:55 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging-kc/</guid>
      <description>Logging  kubectl logs  apiVersion: v1 kind: Pod metadata: name: counter spec: containers: - name: count image: busybox args: [/bin/sh, -c, &amp;#39;i=0; while true; do echo &amp;#34;$i: $(date)&amp;#34;; i=$((i+1)); sleep 1; done&amp;#39;] $ kubectl logs counter 0: Mon Jan 1 00:00:00 UTC 2001 1: Mon Jan 1 00:00:01 UTC 2001 2: Mon Jan 1 00:00:02 UTC 2001 </description>
    </item>
    
    <item>
      <title>Logging at node level</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging-node/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:55 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging-node/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Logging - Cluster</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging-cluster/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:55 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging-cluster/</guid>
      <description>Using a node logging agent </description>
    </item>
    
    <item>
      <title>Logging - Cluster</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging-cluster-streaming-sidecar/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:55 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging-cluster-streaming-sidecar/</guid>
      <description>Using a streaming sidecar container with the logging agent </description>
    </item>
    
    <item>
      <title>Logging - Cluster</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging-cluster-sidecar-agent/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:55 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/logging-cluster-sidecar-agent/</guid>
      <description>Using a sidecar container with the logging agent </description>
    </item>
    
    <item>
      <title>Security - Containers</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/security/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:49 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/security/</guid>
      <description>Container security primitives  SElinux AppArmor Seccomp https://docs.docker.com/engine/security/seccomp/#run-without-the-default-seccomp-profile  Container Pipeline  Establish a pipeline to build a standard image Have a versioning policy Allow to only run images based of the standard image Use the same OS as the host Keep the image small Use a private registry Don’t embed secrets into images, use Hashicorp Vault https://www.cisecurity.org/benchmark/docker/ https://github.com/docker/docker-bench-security  </description>
    </item>
    
    <item>
      <title>Security - K8</title>
      <link>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/security1/</link>
      <pubDate>Sun, 09 Dec 2018 17:13:49 -0500</pubDate>
      
      <guid>https://shahadarsh.github.io/docker-k8s-presentation/kubernetes/extras/security1/</guid>
      <description>K8 Security  RBAC NetworkPolicy TLS Image Scanning Aquasec/Twistlock Integrating with HashiCorp Vault other public cloud secret stores Investigate using a container based OS (CoreOS, Atomic Linux) Harden and tweak Make sure to pass https://github.com/dev-sec/linux-baseline  Vendors to add  Aquasec https://www.aquasec.com/ Twistlock https://www.twistlock.com/ Sysdig Falco https://www.sysdig.org/falco/  </description>
    </item>
    
  </channel>
</rss>